/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,

  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");

const app = express();
app.use(bodyParser.json());

//display all the todos
app.get("/todos", (req, res) => {
  const filePath = path.join(__dirname, "todos.json");
  fs.readFile(filePath, "utf-8", (err, data) => {
    if (err) {
      return res.status(404).send({
        error: "Error reading file",
        details: err.message,
      });
    }
    if (!data.trim()) {
      return res.status(400).send({ error: "File content is empty" });
    }

    try {
      const todos = JSON.parse(data);

      if (!Array.isArray(todos)) {
        // If the content is not an array, return an error
        return res
          .status(500)
          .send({ error: "File content is not a valid array" });
      }

      if (todos.length === 0) {
        // If the array is empty, return a specific response
        return res
          .status(200)
          .send({ message: "No todos available", todos: [] });
      }
      return res.status(200).json(todos); // Return the todos if they exist;
    } catch (parseError) {
      return res.status(500).send({
        error: "Error parsing JSON file",
        details: parseError.message,
      });
    }
  });
});

//display specific todo with its id
app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("todos.json", "utf-8", (err, data) => {
    const requiredTodo = JSON.parse(data).filter((item) => {
      return item.id === id;
    });
    if (err) {
      return res.status(404).json({
        msg: "Invalid todo id",
      });
    }
    if (requiredTodo.length === 0) {
      return res.status(404).json({
        msg: "Invalid id",
      });
    }
    return res.status(200).json(requiredTodo);
  });
});

//creates a new todo. Following is the original post method
// app.post("/todos", (req, res) => {
//   // 1st extract the path of the file in which new todo is to be inserted
//   const filePath = path.join(__dirname, "todos.json");
//   //2nd accept the new todo form body
//   let newTodo = req.body;
//   //3rd add a automatically generated id to new todo
//   (newTodo.id = Math.floor(Math.random() * 1000000)), // unique random id;
//     //4th read the file in which new todo is to be inserted
//     fs.readFile(filePath, "utf-8", (err, data) => {
//       //If error occurs while reading file execute the below if block
//       if (err) {
//         return res.status(500).json({
//           error: "Error in reading file",
//           details: err.message,
//         });
//       }
//       //5th created a array for todo
//       let todos = [];
//       //following if block removes any leading or trailing whitespace present in the previous data of file, making it easier to validate if the file contains meaningful content.
//       if (data.trim()) {
//         try {
//           todos = JSON.parse(data);
//         } catch (parseError) {
//           return res.status(500).json({
//             error: "Error parsing JSON file",
//             details: parseError.message,
//           });
//         }
//       }
//       //check if the created "todos" is array or not
//       if (!Array.isArray(todos)) {
//         return res.status(500).json({
//           error: "File content is not an array",
//         });
//       }
//       //add new todo to the existing todo
//       todos.push(newTodo);
//       //6th write the modified list of todos again to the same file
//       fs.writeFile(filePath, JSON.stringify(todos, null, 2), (writeErr) => {
//         if (writeErr) {
//           return res.status(500).json({
//             error: "Error writing to file",
//             details: writeErr.message,
//           });
//         }
//         return res.status(201).send({
//           msg: newTodo.id + " todo added successfully",
//           todos,
//         });
//       });
//     });
// });

app.post("/todos", (req, res) => {
  const filePath = path.join(__dirname, "todos.json");
  let newTodo = req.body;
  newTodo.id = Math.floor(Math.random() * 1000000); // Generate a unique ID

  fs.readFile(filePath, "utf-8", (err, data) => {
    if (err) {
      return res.status(500).json({
        error: "Error reading file",
        details: err.message,
      });
    }

    let todos = [];
    if (data.trim()) {
      try {
        todos = JSON.parse(data);
      } catch (parseError) {
        return res.status(500).json({
          error: "Error parsing JSON",
          details: parseError.message,
        });
      }
    }

    todos.push(newTodo);

    fs.writeFile(filePath, JSON.stringify(todos, null, 2), (writeErr) => {
      if (writeErr) {
        return res.status(500).json({
          error: "Error writing to file",
          details: writeErr.message,
        });
      }
      return res.status(201).json(newTodo); // Return the created todo
    });
  });
});


//update todo of specific id following is the original code
// app.put("/todos/:id", (req, res) => {
//   const filePath = path.join(__dirname, "todos.json");

//   fs.readFile(filePath, "utf-8", (err, data) => {
//     const todos = JSON.parse(data);

//     //check if file is empty or not
//     if (!data.trim()) {
//       return res.status(400).send({ error: "File content is empty" });
//     }

//     //check if array is empty or not
//     if (todos.length === 0) {
//       return res.status(200).send({ message: "No todos available", todos: [] });
//     }

//     const todoIndex = todos.findIndex((item) => {
//       return item.id === parseInt(req.params.id);
//     });

//     //check if the index is valid or not
//     if (todoIndex === -1) {
//       return res.status(404).json({
//         msg: "Invalid id!",
//       });
//     } else {
//       todos[todoIndex].title = req.body.title;
//       todos[todoIndex].completed = req.body.completed;
//       fs.writeFile(filePath, JSON.stringify(todos, null, 2), (writeErr) => {
//         if (writeErr) {
//           return res.status(500).json({
//             error: "Error writing to file",
//             details: writeErr.message,
//           });
//         }
//         return res.status(200).send({
//           msg: "todo updated Successfully",
//           todos,
//         });
//       });
//     }
//   });
// });

app.get("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const filePath = path.join(__dirname, "todos.json");

  fs.readFile(filePath, "utf-8", (err, data) => {
    if (err || !data.trim()) {
      return res.status(404).send({ error: "Todo not found or file is empty" });
    }

    try {
      const todos = JSON.parse(data);
      const requiredTodo = todos.find((item) => item.id === id);

      if (!requiredTodo) {
        return res.status(404).json({ msg: "Invalid id" });
      }
      res.status(200).json(requiredTodo);
    } catch (parseError) {
      return res.status(500).json({
        error: "Error parsing JSON",
        details: parseError.message,
      });
    }
  });
});


//delete todo of specific id
app.delete("/todos/:id", (req, res) => {
  const filePath = path.join(__dirname, "todos.json");

  //read the file
  fs.readFile(filePath, "utf-8", (err, data) => {
    let todos = JSON.parse(data);

    //check if the file is empty or not
    if (!data.trim()) {
      return res.status(400).send({ error: "File content is empty" });
    }

    //check if the array is empty or not
    if (todos.length === 0) {
      // If the array is empty, return a specific response
      return res.status(200).send({ message: "No todos available", todos: [] });
    }

    //when everything is fine run the following block
    let todoIndex = todos.findIndex((item) => {
      return item.id === parseInt(req.params.id);
    });

    //check if the index is valid or not
    if (todoIndex === -1) {
      return res.status(404).json({
        msg: "Invalid id!",
      });
    } else {
      todos = todos.filter((item) => {
        return item.id != parseInt(req.params.id);
      });
      fs.writeFile(filePath, JSON.stringify(todos, null, 2), (err) => {
        if (err) {
          return res.status(500).json({
            error: "Error writing to file",
            details: writeErr.message,
          });
        }
        return res.status(200).json({
          msg: "Todo item was found and deleted!",
        });
      });
    }
  });
});

// app.listen(3000);

module.exports = app;
